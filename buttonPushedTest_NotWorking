import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

import java.sql.Date;
import java.time.LocalDate;
import java.time.Month;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import bcccp.carpark.CarSensor;
import bcccp.carpark.Carpark;
import bcccp.carpark.ICarSensor;
import bcccp.carpark.ICarpark;
import bcccp.carpark.IGate;
import bcccp.carpark.entry.EntryController;
import bcccp.carpark.entry.IEntryController;
import bcccp.carpark.entry.IEntryUI;
import bcccp.carpark.paystation.PaystationController;
import bcccp.tickets.adhoc.AdhocTicket;
import bcccp.tickets.adhoc.AdhocTicketDAO;
import bcccp.tickets.adhoc.AdhocTicketFactory;
import bcccp.tickets.adhoc.IAdhocTicket;
import bcccp.tickets.adhoc.IAdhocTicketDAO;
import bcccp.tickets.adhoc.IAdhocTicketFactory;
import bcccp.tickets.season.ISeasonTicketDAO;
import bcccp.tickets.season.SeasonTicketDAO;
import bcccp.tickets.season.UsageRecordFactory;

	


	public class testEntryContoller {	
		
		long entryDateTime = System.currentTimeMillis();
		
		EntryController sut;
		ICarSensor os;
		ICarSensor is;
		
		IAdhocTicketFactory adhocTicketFactory;
		ICarSensor carSensor;
		IGate gate;
		IEntryUI ui;
		EntryController mm;
		Carpark carpark;
		
		String carparkId; 
		int ticketNo; 
		String barcode;		
		
		
	    IAdhocTicket testTicket;
	    IAdhocTicketDAO adhoc;
	    IAdhocTicketDAO adhoc2;
	    ISeasonTicketDAO season;
	    Carpark cp;
	    PaystationController PayController;
		
		
		
		@Before
		public void setUp() throws Exception {
			
			season = new SeasonTicketDAO(new UsageRecordFactory());
	        adhoc = new AdhocTicketDAO(new AdhocTicketFactory());
	        
	        cp = new Carpark("TestCarPark", 1, adhoc, season);      
	        testTicket = cp.issueAdhocTicket();
	        
			carpark = mock(Carpark.class);
			is = mock(ICarSensor.class);
			os = mock(ICarSensor.class);
			gate = mock(IGate.class);
			ui = mock(IEntryUI.class);
			
			adhocTicketFactory = mock(IAdhocTicketFactory.class);
			
			os = new CarSensor("os", 0, 0);
			is = new CarSensor("is", 0 ,0);
			
			
			sut = new EntryController(cp, gate, os, is, ui);	
			
			os.registerResponder(sut);
			is.registerResponder(sut);
			cp.register(sut);
			ui.registerController(sut);
		}

		@After
		public void tearDown() throws Exception {
			sut = null;
		}
	//test Constructor
		//confirm working and intial state is IDLE
		@Test
		public void testInit() {
			assertTrue(sut instanceof IEntryController);
			assertEquals("IDLE", sut.getSTATE().toString());
		}
		
	
		
		
		/*
		 * carpark not full, car arrives and pushes button
		 * trying to verify that the AdhocTicektFactory.make() is acctually called
		 */
		public void testButtonPushed1() {
			os.manuallySetCarAtGate();
			sut.carEventDetected(os.getId(), true);
			assertEquals("WAITING", sut.getSTATE().toString());
			sut.buttonPushed();
			assertEquals(cp.isFull(), false);
			verify(adhocTicketFactory).make(Mockito.anyString(),  Mockito.anyInt());
		}
		
		
		/*
		 * carpark not full, car arrives and pushes button
		 * proving ticket is made by comparing how many current tickets are in the system before the
		 * button is pushed vs after the button is pushed. 
		 * This test appears to pass but does not
		 * actually prove that you made and issued a ticket, just that the ticektNo has incremented 
		 * looking at the println outputs we can see that this test is not perfoming as expected
		 */
		public void testButtonPushed() {
			//check how many tickets in current ticket list before button pushed
			System.out.println("before button pushed " + adhoc.getCurrentTickets().size());
			
			os.manuallySetCarAtGate();
			sut.carEventDetected(os.getId(), true);
			assertEquals("WAITING", sut.getSTATE().toString());
			sut.buttonPushed();
			
			//check how many tickets in current ticket list after button pushed
			System.out.println("after button pushed " + adhoc.getCurrentTickets().size());
			
			assertEquals(cp.isFull(), false);
			assertEquals(adhoc.getCurrentTickets().size(), ticketNo++);	
			assertEquals("ISSUED", sut.getSTATE());
		}
		
		@Test
		/*
		* Carpark not in the correct state and customer pushes button
		* this test should fail but is currently passing
		*/
		public void testButtonPushedWrongState() {
			assertNotEquals("WAITING", sut.getSTATE().toString());
			sut.buttonPushed();
			verify(ui).beep(); 
			
		}
		
		/*
		 * controller in WAITING state, prove first thing done is check 
		 * carpark is full or not
		 */
		@Test
		public void buttonPushedChecksCapacity() {
			os.manuallySetCarAtGate();
			sut.carEventDetected(os.getId(), true);
			assertEquals("WAITING", sut.getSTATE().toString());
			sut.buttonPushed();
			//verify(carpark).isFull();
		}
		
		/*
		 * carpark full, display message and change state to FULL
		 */
		@Test
		public void buttonPushedCarparkFull() {
			cp.recordAdhocTicketEntry();//now carpark is full
			os.manuallySetCarAtGate();
			sut.carEventDetected(os.getId(), true);
			assertEquals("WAITING", sut.getSTATE().toString());
			sut.buttonPushed();
			assertEquals(true, cp.isFull());
			assertEquals("FULL", sut.getSTATE().toString());
			verify(ui).display((contains("Carpark Full")));			
		}
		
		/*
		 * Test for ticketInserted 
		 * controller must be in the waiting state or 'beep'
		 * 
		 */
		
		@Test
		public void ticketInsertedWrongState() {
			assertNotEquals("WAITING", sut.getSTATE().toString());
			sut.ticketInserted(testTicket.getBarcode());
			verify(ui).beep();			
		}
		
		
	}
