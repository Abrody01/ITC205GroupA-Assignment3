import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.contains;
import static org.mockito.Mockito.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import bcccp.carpark.CarSensor;
import bcccp.carpark.Carpark;
import bcccp.carpark.ICarSensor;
import bcccp.carpark.IGate;
import bcccp.carpark.entry.EntryController;
import bcccp.carpark.entry.IEntryController;
import bcccp.carpark.entry.IEntryUI;
import bcccp.carpark.paystation.PaystationController;
import bcccp.tickets.adhoc.AdhocTicketDAO;
import bcccp.tickets.adhoc.AdhocTicketFactory;
import bcccp.tickets.adhoc.IAdhocTicket;
import bcccp.tickets.adhoc.IAdhocTicketDAO;
import bcccp.tickets.adhoc.IAdhocTicketFactory;
import bcccp.tickets.season.ISeasonTicketDAO;
import bcccp.tickets.season.SeasonTicketDAO;
import bcccp.tickets.season.UsageRecordFactory;

	


	public class testEntryControllerStatesWorkAsExpected {	
		
		EntryController sut;
		ICarSensor os;
		ICarSensor is;
		IAdhocTicketFactory adhocTicketFactory;
		ICarSensor carSensor;
		IGate gate;
		IEntryUI ui;
		EntryController mm;
		Carpark carpark;
		String carparkId; 
		int ticketNo; 
		String barcode;		
		IAdhocTicket testTicket;
	    IAdhocTicketDAO adhoc;
	    ISeasonTicketDAO season;
	    Carpark cp;
	    PaystationController PayController;
		
		
		
		@Before
		public void setUp() throws Exception {
			
			season = new SeasonTicketDAO(new UsageRecordFactory());
	        adhoc = new AdhocTicketDAO(new AdhocTicketFactory());
	        
	        cp = new Carpark("TestCarPark", 1, adhoc, season);      
	        testTicket = cp.issueAdhocTicket();
	        
			carpark = mock(Carpark.class);
			is = mock(ICarSensor.class);
			os = mock(ICarSensor.class);
			gate = mock(IGate.class);
			ui = mock(IEntryUI.class);
			adhocTicketFactory = mock(IAdhocTicketFactory.class);
			
			os = new CarSensor("os", 0, 0);
			is = new CarSensor("is", 0 ,0);
			
			sut = new EntryController(cp, gate, os, is, ui);	
			
			os.registerResponder(sut);
			is.registerResponder(sut);
			cp.register(sut);
			ui.registerController(sut);
		}

		@After
		public void tearDown() throws Exception {
			sut = null;
		}
	
		@Test
		public void idle() {
			//no car at IS or OS
			sut.carEventDetected(os.getId(), false);
			sut.carEventDetected(is.getId(), false);
			assertEquals("IDLE", sut.getSTATE().toString());
		}
		
		@Test
		public void waiting() {
			//car at OS
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			assertEquals("WAITING", sut.getSTATE().toString());
		}
		
		@Test
		public void full() {
			//car at OS, no space avalible
			cp.recordAdhocTicketEntry();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			assertEquals("FULL", sut.getSTATE().toString());
		}
		
		@Test
		public void blocked() {
			//car at IS && car at OS && barrier down
			gate.lower();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			sut.carEventDetected(is.getId(), true);
			assertEquals("BLOCKED", sut.getSTATE().toString());
			
			gate.raise();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			sut.carEventDetected(is.getId(), true);
			assertNotEquals("BLOCKED", sut.getSTATE().toString());
			
			gate.lower();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), false);
			sut.carEventDetected(is.getId(), true);
			assertNotEquals("BLOCKED", sut.getSTATE().toString());
			
			gate.lower();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			sut.carEventDetected(is.getId(), false);
			assertNotEquals("BLOCKED", sut.getSTATE().toString());
			
			gate.lower();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), false);
			sut.carEventDetected(is.getId(), false);
			assertNotEquals("BLOCKED", sut.getSTATE().toString());
		}
		
		@Test
		public void issued() {
			//car at OS and ticket issued after the button was pushed, ticket not yet taken
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			sut.buttonPushed();
			assertEquals("ISSUED", sut.getSTATE().toString());
		}
		
		@Test
		public void taken() {
			//car at OS && adhoc ticket has been taken && the gate is raised
			gate.raise();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			sut.buttonPushed();
			sut.ticketTaken();
			assertEquals("TAKEN", sut.getSTATE().toString());
			
			gate.raise();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), false);
			sut.buttonPushed();
			sut.ticketTaken();
			assertNotEquals("TAKEN", sut.getSTATE().toString());
			
			
			gate.raise();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			sut.buttonPushed();
			//sut.ticketTaken();
			assertNotEquals("TAKEN", sut.getSTATE().toString());
			
			gate.lower();
			sut.carEventDetected(os.getId(), true);
			sut.buttonPushed();
			sut.ticketTaken();
			assertNotEquals("TAKEN", sut.getSTATE().toString());
		}
		
		@Test
		public void entering() {
			//car at IS && OS && gate is up
			gate.raise();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			sut.carEventDetected(os.getId(), true);
			assertEquals("ENTERING", sut.getSTATE().toString());
			
			gate.lower();
			sut.carEventDetected(os.getId(), true);
			sut.carEventDetected(os.getId(), true);
			assertNotEquals("ENTERING", sut.getSTATE().toString());
			
			gate.raise();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), false);
			sut.carEventDetected(os.getId(), true);
			assertNotEquals("ENTERING", sut.getSTATE().toString());
			
			gate.raise();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			sut.carEventDetected(os.getId(), false);
			assertNotEquals("ENTERING", sut.getSTATE().toString());
			
			gate.raise();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), false);
			sut.carEventDetected(os.getId(), false);
			assertNotEquals("ENTERING", sut.getSTATE().toString());
		}
		
		@Test
		public void entered() {
			//car at IS && no car at OS && gate up
			gate.raise();
			sut.carEventDetected(os.getId(), false);
			sut.carEventDetected(os.getId(), true);
			assertEquals("ENTERING", sut.getSTATE().toString());
			
			gate.lower();
			sut.carEventDetected(os.getId(), false);
			sut.carEventDetected(os.getId(), true);
			assertNotEquals("ENTERING", sut.getSTATE().toString());
			
			gate.raise();
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			sut.carEventDetected(os.getId(), true);
			assertNotEquals("ENTERING", sut.getSTATE().toString());
			
			gate.raise();
			sut.carEventDetected(os.getId(), false);
			sut.carEventDetected(os.getId(), false);
			assertNotEquals("ENTERING", sut.getSTATE().toString());
		}
	}
	
	
