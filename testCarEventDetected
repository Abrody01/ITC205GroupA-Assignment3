import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.contains;
import static org.mockito.Mockito.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import bcccp.carpark.CarSensor;
import bcccp.carpark.Carpark;
import bcccp.carpark.ICarSensor;
import bcccp.carpark.IGate;
import bcccp.carpark.entry.EntryController;
import bcccp.carpark.entry.IEntryController;
import bcccp.carpark.entry.IEntryUI;
import bcccp.carpark.paystation.PaystationController;
import bcccp.tickets.adhoc.AdhocTicketDAO;
import bcccp.tickets.adhoc.AdhocTicketFactory;
import bcccp.tickets.adhoc.IAdhocTicket;
import bcccp.tickets.adhoc.IAdhocTicketDAO;
import bcccp.tickets.adhoc.IAdhocTicketFactory;
import bcccp.tickets.season.ISeasonTicketDAO;
import bcccp.tickets.season.SeasonTicketDAO;
import bcccp.tickets.season.UsageRecordFactory;

	


	public class testCarEventDetected {	
		
		EntryController sut;
		ICarSensor os;
		ICarSensor is;
		IAdhocTicketFactory adhocTicketFactory;
		ICarSensor carSensor;
		IGate gate;
		IEntryUI ui;
		EntryController mm;
		Carpark carpark;
		String carparkId; 
		int ticketNo; 
		String barcode;		
		IAdhocTicket testTicket;
	    IAdhocTicketDAO adhoc;
	    ISeasonTicketDAO season;
	    Carpark cp;
	    PaystationController PayController;
		
		
		
		@Before
		public void setUp() throws Exception {
			
			season = new SeasonTicketDAO(new UsageRecordFactory());
	        adhoc = new AdhocTicketDAO(new AdhocTicketFactory());
	        
	        cp = new Carpark("TestCarPark", 1, adhoc, season);      
	        testTicket = cp.issueAdhocTicket();
	        
			carpark = mock(Carpark.class);
			is = mock(ICarSensor.class);
			os = mock(ICarSensor.class);
			gate = mock(IGate.class);
			ui = mock(IEntryUI.class);
			adhocTicketFactory = mock(IAdhocTicketFactory.class);
			
			os = new CarSensor("os", 0, 0);
			is = new CarSensor("is", 0 ,0);
			
			sut = new EntryController(cp, gate, os, is, ui);	
			
			os.registerResponder(sut);
			is.registerResponder(sut);
			cp.register(sut);
			ui.registerController(sut);
		}

		@After
		public void tearDown() throws Exception {
			sut = null;
		}
		
		private void setStateIDLE() {
			
		}
		
		private void setStateWAITING() {
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true); //outside sensor
		}
		
		private void setStateBLOCKED() {
			sut.carEventDetected(os.getId(), false); //outside sensor
			sut.carEventDetected(is.getId(), true); //inside sensor
			
		}
		
		private void setStateTAKEN() {
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			sut.buttonPushed();
			verify(ui).display((contains("Take Ticket")));
			sut.ticketTaken();
		}
		
		private void setStateENTERING() {
			setStateTAKEN();
			sut.carEventDetected(is.getId(), true); //inside sensor
			
		}
		
		private void setStateENTERED() {
			setStateENTERING();
			sut.carEventDetected(os.getId(), false); //outside sensor
		}
		
		@Test
		public void changeFromIDLEtoWAITINGorBLOCKED() {
			/*
			 * starting in the IDLE state
			 * if a car arrives at the outside sensor does it transition to WAITING
			 * and show 'push button' message
			 * if a car is on the inside sensor does it tranition to BLOCKED
			 */
			assertEquals("IDLE", sut.getSTATE().toString()); //inital state
			setStateWAITING();
			verify(ui).display((contains("Push Button")));
			assertEquals("WAITING", sut.getSTATE().toString());
			sut.carEventDetected(is.getId(), true); //inside sensor
			assertEquals("BLOCKED", sut.getSTATE().toString());
			
		}
		
		@Test
		public void changefromWAITINGtoIDLEorBLOCKED() {	
			/*
			 * starting in the WAITING state if a car leaves the outside sensor 
			 * does it transition to IDLE
			 * if a car is on the inside sensor does it transition to BLOCKED
			 */
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true);
			assertEquals("WAITING", sut.getSTATE().toString());
			os.manuallySetCarAtGate(); //car leaves gate
			sut.carEventDetected(os.getId(), false); //outside sensor
			sut.carEventDetected(is.getId(), false); //inside sensor
			assertEquals("IDLE", sut.getSTATE().toString());
			sut.carEventDetected(os.getId(), false); //outside sensor
			sut.carEventDetected(is.getId(), true); //inside sensor
			assertEquals("BLOCKED", sut.getSTATE().toString());
			
		}
		
		@Test
		public void changeFromBLOCKEDtoIDLE() {
			/*
			 * starting in the BLOCKED state, if the car leaves the outside sensor
			 * does it transition to IDLE?
			 */
			os.manuallySetCarAtGate(); //car at gate
			sut.carEventDetected(os.getId(), true); //outside sensor
			sut.carEventDetected(is.getId(), true); //inside sensor
			assertEquals("BLOCKED", sut.getSTATE().toString());
			os.manuallySetCarAtGate(); //car leaves gate
			sut.carEventDetected(os.getId(), false); //outside sensor
			assertEquals("IDLE", sut.getSTATE().toString());
			
		}
		
		@Test
		public void changeFromIDLEtoPreviousState() {
			/*
			 * starting in the IDLE state, if it goes to blocked and then 
			 * the car leaves the inside sensor will it revert to the previous state?
			 */			
			sut.carEventDetected(os.getId(), false); //outside sensor
			sut.carEventDetected(is.getId(), false); //inside sensor
			assertEquals("IDLE", sut.getSTATE().toString());
			sut.carEventDetected(is.getId(), true); //inside sensor
			assertEquals("BLOCKED", sut.getSTATE().toString());
			sut.carEventDetected(is.getId(), false); //inside sensor
			assertEquals("IDLE", sut.getSTATE().toString());
		}
		
		@Test
		public void changeFromTAKENtoIDLE() {
			/*
			 * from the TICKET TAKEN state, if the outside sensor detects an 
			 * absense will it transition to IDLE			 
			 */
			
			setStateTAKEN();
			assertEquals("TAKEN", sut.getSTATE().toString());
			os.manuallySetCarAtGate(); //car leaves gate
			sut.carEventDetected(os.getId(), false); //outside sensor
			assertEquals("IDLE", sut.getSTATE().toString());
			
		}
		
		@Test
		public void changeFromTAKENtoENTEREING() {
			/*
			 * from the TICKET TAKEN state, if the inside sensor detects a car 
			 * state becomes ENTERING			 
			 */
			
			setStateTAKEN();
			assertEquals("TAKEN", sut.getSTATE().toString());
			sut.carEventDetected(is.getId(), true); //inside sensor
			assertEquals("ENTERING", sut.getSTATE().toString());
			
		}
		
		@Test
		public void changeFromENTERINGtoENTERED() {
			/*
			 * from ENTERING state
			 * outside sensor detects absents, enter state ENTERED
			 */
			setStateENTERING();
			assertEquals("ENTERING", sut.getSTATE().toString());
			sut.carEventDetected(os.getId(), false); //outside sensor
			assertEquals("ENTERED", sut.getSTATE().toString());
		}
		
		@Test
		public void changeFromENTERINGtoTAKEN() {
			/*
			 * from ENTERING state
			 * inside sensor detects absents, enter state TICKET_TAKEN
			 */
			
			setStateENTERING(); 
			assertEquals("ENTERING", sut.getSTATE().toString());
			sut.carEventDetected(is.getId(), false); //inside sensor
			assertEquals("TAKEN", sut.getSTATE().toString());			
		}
		
		@Test
		public void changefromENTEREDtoIDLE() {
			/*
			 * from the ENTERED state if the inside snsor detects a car absence 
			 * will it lower the entry gate and change to IDLE state?
			 */
			setStateENTERED(); //get into the ENTERTED state
			assertEquals("ENTERED", sut.getSTATE().toString());
			sut.carEventDetected(is.getId(), false); //inside sensor
			verify(gate).lower();
			assertEquals("IDLE", sut.getSTATE().toString());
		}
		
		@Test
		public void changefromENTEREDtoENTERING() {
			/*
			 * ouside sensor detects a car
			 * controller transitisons back to ENTERING
			 */
			setStateENTERED();
			assertEquals("ENTERED", sut.getSTATE().toString());
			sut.carEventDetected(os.getId(), true); //outside sensor
			assertEquals("ENTERING", sut.getSTATE().toString());
		}
		
		
	}
